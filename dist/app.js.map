{"version":3,"file":"app.js","mappings":"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","sources":["webpack://understanding-typescript/./src/components/base-component.ts","webpack://understanding-typescript/./src/utils/validation.ts","webpack://understanding-typescript/./src/decorators/autobind.ts","webpack://understanding-typescript/./src/models/project.ts","webpack://understanding-typescript/./src/states/project-state.ts","webpack://understanding-typescript/./src/components/project-input.ts","webpack://understanding-typescript/./src/components/project-item.ts","webpack://understanding-typescript/./src/components/project-list.ts","webpack://understanding-typescript/./src/app.ts"],"sourcesContent":["// Component base class\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtFirst: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n    this.attach(insertAtFirst);\n  }\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n  abstract configure(): void;\n  abstract renderContent(): void;\n}\n","// Validation\nexport interface Validation {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validatableInput: Validation) {\n  let isValid = true;\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid;\n}\n","// autobind decorator\nexport function autobind(\n  _targe: any,\n  _methodName: string,\n  descriptor: PropertyDescriptor\n) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const bindFn = originalMethod.bind(this);\n      return bindFn;\n    },\n  };\n  return adjDescriptor;\n}\n","// Project type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project,ProjectStatus } from \"../models/project\";\n\n  // Project State Management\n  type Listener<T> = (items: T[]) => void;\n\n  export class State<T> {\n    protected listeners: Listener<T>[] = [];\n\n    addListener(listenerFn: Listener<T>) {\n      this.listeners.push(listenerFn);\n    }\n  }\n\n  export class ProtectState extends State<Project> {\n    private projects: Project[] = [];\n    private static instance: ProtectState;\n\n    private constructor() {\n      super();\n    }\n\n    static getInstance() {\n      if (this.instance) {\n        return this.instance;\n      }\n      this.instance = new ProtectState();\n      return this.instance;\n    }\n\n    addProject(title: string, description: string, numOfPeople: number) {\n      const newProject = new Project(\n        Math.random().toString(),\n        title,\n        description,\n        numOfPeople,\n        ProjectStatus.Active\n      );\n      this.projects.push(newProject);\n      this.updateListeners();\n    }\n\n    moveProject(projectId: string, newStatus: ProjectStatus) {\n      const project = this.projects.find((prj) => prj.id === projectId);\n      if (project && project.status !== newStatus) {\n        project.status = newStatus;\n        this.updateListeners();\n      }\n    }\n\n    private updateListeners() {\n      for (const listenerFn of this.listeners) {\n        listenerFn(this.projects.slice());\n      }\n    }\n  }\n\n  export const projectState = ProtectState.getInstance();\n\n","import { Component } from \"./base-component\";\nimport { Validation, validate } from \"../utils/validation\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../states/project-state\";\n\n// ProjectInput class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleElement: HTMLInputElement;\n  descriptionElement: HTMLInputElement;\n  peopleElement: HTMLInputElement;\n\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n\n    this.titleElement = this.element.querySelector(\n      \"#title\"\n    ) as HTMLInputElement;\n    this.descriptionElement = this.element.querySelector(\n      \"#description\"\n    ) as HTMLInputElement;\n    this.peopleElement = this.element.querySelector(\n      \"#people\"\n    ) as HTMLInputElement;\n\n    this.configure();\n  }\n\n  configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n  renderContent(): void {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleElement.value;\n    const enteredDescription = this.descriptionElement.value;\n    const enteredPeople = this.peopleElement.value;\n\n    const titleValidatable: Validation = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validation = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const peopleValidatable: Validation = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(peopleValidatable)\n    ) {\n      alert(\"Invalid input, please try again!\");\n      return;\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople];\n    }\n  }\n\n  private clearInputs() {\n    this.titleElement.value = \"\";\n    this.descriptionElement.value = \"\";\n    this.peopleElement.value = \"\";\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput;\n      projectState.addProject(title, desc, people);\n      this.clearInputs();\n    }\n  }\n}\n","import { Component } from \"./base-component\";\nimport { Draggable } from \"../models/drag-drop\";\nimport { Project } from \"../models/project\";\nimport { autobind } from \"../decorators/autobind\";\n\n// ProjectItem class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get persons() {\n    if (this.project.people === 1) {\n      return `${this.project.people} person`;\n    } else {\n      return `${this.project.people} persons`;\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent): void {\n    event.dataTransfer?.setData(\"text/plain\", this.project.id);\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n  dragEndHandler(_: DragEvent): void {\n    console.log(\"DragEnd\");\n  }\n\n  configure(): void {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent(): void {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\";\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import { Component } from \"./base-component\";\nimport { DragTarget } from \"../models/drag-drop\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../states/project-state\";\nimport { ProjectItem } from \"./project-item\";\n\n// ProjectList class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent): void {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n  @autobind\n  dropHandler(event: DragEvent): void {\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n  @autobind\n  dragLeaveHandler(_: DragEvent): void {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  configure(): void {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        } else {\n          return prj.status === ProjectStatus.Finished;\n        }\n      });\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-project-list`;\n    this.element.querySelector(\"ul\")!.id = listId;\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type.toUpperCase() + \" PROJECTS\";\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-project-list`\n    )! as HTMLUListElement;\n    listEl.innerHTML = \"\";\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\n    }\n  }\n}\n","import { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\n"],"names":["Component","constructor","templateId","hostElementId","insertAtFirst","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_targe","_methodName","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProtectState","super","projects","getInstance","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","ProjectInput","titleElement","querySelector","descriptionElement","peopleElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","_","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}